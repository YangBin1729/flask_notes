#### 邮件

```
import os
from flask import Flask
app = Flask(__name__)
```

+ 模块：Flask-Mail，By a Simple Mail Transfer Protocol (SMTP) server

+ 配置flask应用的邮箱：
```
app.config['MAIL_SERVEER'] = 'smtp.googlemail.com'/'smtp.sina.cn'
app.config['MAIL_PORT'] = 587/25
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD')
```

+ 初始化：
```
from flask_mail import Mail
mail = Mail(app)
```

+ 命令行配置,并发邮件：
```
(venv)> set MAIL_USERNAME = 123456@163.com
(venv)> set MAIL_PASSWORD = 12345678
(venv)> flask shell
>>> from flask_mail import Message
>>> msg = Message('test test', sender='123456@163.com', recipients=['abc@123.com', 'wer@123.com'])
>>> msg.body = 'hello,email in flask apps'
>>> msg.html = 'This is the <b>HTML</b> body'
>>> with app.app_context():
        mail.send(msg)
```


+ 整合进应用,各参数：邮件主题subject,邮件内容模板template，收邮件的to
```
app.config['FLASKY_MAIL_SUBJECT_PREFIX'] = '[Flasky]'
app.config['FLASKY_MAIL_SENDER'] = 'Flasky Admin <flasky@example.com>'

def send_email(to, subject, template, **kwargs):
    msg = Message(app.config['FLASKY_MAIL_SUBJECT_PREFIX'] + subject,
                  sender=app.config['FLASKY_MAIL_SENDER'], recipients=[to])
    msg.body = render_template(template + '.txt', **kwargs)
    msg.html = render_template(template + '.html', **kwargs)
    mail.send(msg)
```


+ 新用户注册时，管理员邮箱收到邮件
```
@app.route('/', methods=['GET', 'POST'])
def index():
    form = NameForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.name.data).first()
        if user is None:
            user = User(username=form.name.data)
            db.session.add(user)
            db.session.commit()
            session['known'] = False
            send_email(app.config['FLASK_ADMIN'], 'New User', 'mail/new_user', user=user)
        else:
            session['known'] = True
        session['name'] = form.name.data
        form.name.data=''
        return redirect(url_for('index'))
    return render_templeata('index.html', form=form, name=session.get('name'), known=session.get('known', False))
```


+ mail.send()函数会阻塞，浏览器无反应。异步发送邮件
```
from threading import Thread

def send_async_email(app, msg):
    with app.app_context(): # mail.send()函数适用current_app，需要活动的应用上下文
        mail.send(msg)      # 但上下文与thread有关，新建了thread,，上下文也要手动创建

def send_email(to, subject, template, **kwargs):
    msg = Message(app.config['FLASKY_MAIL_SUBJECT_PREFIX'] + subject,
                  sender=app.config['FLASKY_MAIL_SENDER'], recipients=[to])
    msg.body = render_template(template + '.txt', **kwargs)
    msg.html = render_template(template + '.html', **kwargs)
    thr = Thread(target=send_async_email, args=[app, msg])
    thr.start()
    return thr
```    